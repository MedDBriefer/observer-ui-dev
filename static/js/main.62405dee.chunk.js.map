{"version":3,"sources":["contexts/ScenarioContext.js","components/MDBContainer.js","components/icons/CheckBoxIcon.js","components/CheckBox.js","components/CallOutText.js","components/icons/CallOutIcon.js","components/CheckListItem.js","components/icons/ChevronIcon.js","components/CheckList.js","components/tabs/AssessmentFindings.js","components/icons/CheckmarkIcon.js","components/icons/DoneIcon.js","components/forms/FormUtils.js","components/InterventionForm.js","components/tabs/InterventionsTab.js","components/RevealTableRow.js","components/RevealTable.js","components/tabs/SampleTab.js","components/tabs/VitalsTab.js","components/RaterInfo.js","components/CheckListRaterInfoLayout.js","components/icons/UserIcon.js","components/navbar/UserDropDown.js","components/navbar/MDBNavBar.js","components/navbar/SaveScenarioButton.js","components/navbar/ScenarioInfoButton.js","components/icons/TimerIcon.js","utils.js","components/navbar/Timer.js","components/modals/MDBModal.js","components/modals/ScenarioCompleteModal.js","components/modals/ScenarioInfo.js","routes/Scenario.js","routes/ScenarioList.js","components/UnauthedLayout.js","App.js","index.js","../../../libs/mdb-firebase/index.js"],"names":["ScenarioContext","React","createContext","ScenarioProvider","scenario","defaultValues","children","useContext","AuthContext","currentUser","getUserData","isAuthenticated","saveUserData","useState","currentAssessmentFinding","setCurrentAssessmentFinding","checkListItems","setCheckListItems","criticalCriteria","setCriticalCriteria","showForm","showInterventionForm","setShowInterventionForm","vitals","currentVitals","setCurrentVitals","vitalsRecomputed","setVitalsRecomputed","currentInterventionForm","setCurrentInterventionForm","started","setStarted","paused","setPaused","timestamp","setTimestamp","id","duration","info","maxTime","action","type","payload","timeRemaining","expired","timers","setTimers","timerError","setTimerError","actionsQueue","setActionsQueue","collapsed","setCollapsed","showScenarioComplete","setShowScenarioComplete","getTimestamp","clearTimerError","useEffect","interval","setInterval","tick","clearInterval","Object","keys","length","currActionString","currActionPayload","currAction","ACTIONS","newTimers","map","timer","newTimer","assign","newActionsQueue","slice","push","registerTimer","found","find","cancelTimer","filter","timeExpired","console","log","bar","alert","setCollapsedValue","boolVal","prevState","toggleCollapsed","getCollapsed","isChecked","setChecked","newValue","toggleChecked","someChecked","ids","result","some","allChecked","every","isCurrentAssessmentFinding","toggleAssessmentFinding","stepIsChecked","shouldDisplayInterventionForm","includes","setDisplayInterventionForm","toggleDisplayInterventionForm","setVital","vital","value","saveScenarioToLog","label","docRef","db","collection","doc","data","userName","email","Date","toLocaleString","idsAndTimestamps","forEach","ts","sort","recA","recB","set","buildDepListFromCheckListItemIDs","setDerivedCheckListItemValue","depChecker","deps","currVal","newVal","evalIDExpression","exp","replace","re","matches","matchAll","match","eval","Provider","MDBContainer","lhs","rhs","lhsWidth","rhsWidth","Container","fluid","className","Row","Col","md","CheckBoxIcon","checked","CheckBox","props","step","clickHandler","inlineChildren","classnames","onClick","CallOutText","currentCallOut","assessmentFindings","CallOutIcon","style","color","CheckListItem","inlines","ChevronIcon","expand","isHeading","CheckList","steps","depth","first","cursor","Collapse","isOpen","AssessmentFindingsTabContent","checkedAssessmentSteps","useMemo","calloutLabels","callout","Table","size","striped","displayAssessmentFindings","CheckmarkIcon","DoneIcon","NestedForm","checkedWhen","depIDs","child","depList","useCallback","item","DerivedValue","FormCheckBox","SelectOne","onChange","event","selected","target","dep","SelectOneOrMore","IntvFormItem","prompt","IntvForm","rec","InterventionForm","interventionForms","InterventionsTabContent","options","interventionFormsMenu","dropdownOpen","setDropdownOpen","handleInterventionFormSelection","Dropdown","toggle","DropdownToggle","caret","DropdownMenu","opt","DropdownItem","header","RevealTableRow","values","show","setShow","index","invisible","RevealTable","title","headings","rows","heading","row","SampleTabContent","sample","entries","SAMPLE","VitalsTabContent","vitalsHeaders","vitalSigns","iv","initial","RaterInfo","defaultTab","activeTab","setActiveTab","activateTab","tab","isActiveTab","Nav","tabs","NavItem","NavLink","active","TabContent","TabPane","tabId","InterventionsTab","VitalsTab","SampleTab","AssessmentFindings","CheckListRaterInfoLayout","UserIcon","fontSize","UserDropDown","signOutUser","showUserMenu","setShowUserMenu","nav","inNavbar","direction","disabled","divider","MDBNavBar","leftNav","rightNav","Navbar","dark","NavbarBrand","href","NavbarText","tag","SaveScenarioButton","Button","outline","ScenarioInfoButton","TimerIcon","running","formatAsMinSecs","seconds","toISOString","substr","Timer","scenTimer","cn","MDBModal","dismiss","Modal","backdrop","ModalHeader","ModalBody","ScenarioCompleteModal","doRedirect","setDoRedirect","to","onSubmit","preventDefault","elements","htmlFor","defaultValue","placeholder","ScenarioInfo","showModal","setShowModal","name","instructorInformation","patientInformation","moulage","position","actions","dispatchInfo","sceneAssessment","Scenario","scenarioId","setScenario","window","initValues","setInitValues","scenarioData","defaults","initialVitalSigns","loadScen","ScenarioList","sm","scen","UnauthedLayout","App","exact","path","authFlowLayout","component","ReactDOM","render","StrictMode","document","getElementById","firebaseApp","firebase","apps","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore"],"mappings":"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","file":"static/js/main.62405dee.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\"\n\nimport { db } from \"@meddbriefer/mdb-firebase\"\n\nimport { AuthContext } from '@meddbriefer/mdb-auth'\n\nexport const ScenarioContext = React.createContext()\n\nexport const ScenarioProvider = ({scenario, defaultValues, children}) =>{\n\n    const { currentUser, getUserData, isAuthenticated, saveUserData } = useContext(AuthContext)\n    // const [currentNode, setCurrentNode] = useState(defaultValues.currentNode)\n    const [currentAssessmentFinding, setCurrentAssessmentFinding] = useState(null)\n    const [checkListItems, setCheckListItems] = useState(defaultValues.checkListItems)\n    const [criticalCriteria, setCriticalCriteria] = useState(defaultValues.criticalCriteria)\n    const [showInterventionForm, setShowInterventionForm] = useState(defaultValues.showForm)\n    const [currentVitals, setCurrentVitals] = useState(defaultValues.vitals)\n    const [vitalsRecomputed, setVitalsRecomputed] = useState(defaultValues.vitalsRecomputed)\n    const [currentInterventionForm, setCurrentInterventionForm] = useState(null)\n\n    const [started, setStarted] = useState(false)\n    const [paused, setPaused] = useState(false)\n    const [timestamp, setTimestamp] = useState(0)\n    const [timers, setTimers] = useState([{id: 'scenario', duration: scenario.info.maxTime * 60, action:{type: \"timeExpired\", payload: \"time expired\"}, timeRemaining: scenario.info.maxTime * 60, expired: false}])\n    const [timerError, setTimerError] = useState(null)\n    const [actionsQueue, setActionsQueue] = useState([])\n\n    const [collapsed, setCollapsed] = useState({});\n\n    const [showScenarioComplete, setShowScenarioComplete] = useState(false)\n\n    // expose accesor rather than timestamp, in effect making it a private variable\n    const getTimestamp = () => timestamp\n\n    const clearTimerError = () => setTimerError(null)\n\n    useEffect(() => {\n      const interval = setInterval(() => tick(), 1000)\n      // cleanup interval\n      return () => {\n        clearInterval(interval)\n      }\n    })\n\n    useEffect(() => {\n        if (Object.keys(actionsQueue).length !== 0) {\n            let currActionString = actionsQueue[0].type;\n            let currActionPayload = actionsQueue[0].payload;\n            let currAction = ACTIONS[currActionString];\n\n            currAction(currActionPayload);\n        }\n    }, [actionsQueue])\n\n    // Save scenario state\n    // useEffect(\n    //     () => {\n    //         // as both class components .setState() and functional components useState() setters\n    //         // both actually queue the setting of state, as an performance optimization for when\n    //         // there are individual requests for state changes made in a relatively short period\n    //         // of time,  making use of a useEffect() with a dependency array of all state variables\n    //         // we're interested in persisting to the db is a perfect place to capture when they\n    //         // have actually been changed, and thus persist those changes.  since we're not hooked\n    //         // up to the db yet, I'm merely console.log()ing that things have changed, and listing\n    //         // what state we'll be persisting to the db.\n    //         saveUserData(scenario.id, {\n    //             currentAssessmentFinding,\n    //             checkListItems,\n    //             criticalCriteria,\n    //             showInterventionForm,\n    //             currentVitals,\n    //             vitalsRecomputed\n    //         });\n    //     },\n    //     [\n    //         currentAssessmentFinding,\n    //         checkListItems,\n    //         criticalCriteria,\n    //         showInterventionForm,\n    //         currentVitals,\n    //         vitalsRecomputed\n    //     ]\n    // )\n\n    // Load and apply scenario state\n    // useEffect(() => {\n    //     // isAuthenticated &&\n    //     getUserData()\n    //         .then(res => {\n    //             let state = res[scenario.id];\n\n    //             // Set all states\n    //             setCurrentAssessmentFinding(state.currentAssessmentFinding);\n    //             setCheckListItems(state.checkListItems);\n    //             setCriticalCriteria(state.criticalCriteria);\n    //             setShowInterventionForm(state.showInterventionForm);\n    //             setCurrentVitals(state.currentVitals);\n    //             setVitalsRecomputed(state.vitalsRecomputed);\n    //         })\n    //         .catch(err => console.log(err));\n    // }, []);\n\n    const tick = () => {\n        if (started && !paused) {\n            setTimestamp(timestamp + 1);  // Increase the timestamp by 1 if the timers have been started and are not paused\n            const newTimers = timers.map((timer) => {\n                const newTimer = Object.assign(timer)\n                if (!timer.expired) {\n                    if (timer.timeRemaining === 1) {\n                        newTimer.expired = true\n                        if (newTimer.action != null) {  // != instead of !== is intentional\n                            const newActionsQueue = actionsQueue.slice();\n                            newActionsQueue.push(newTimer.action);\n                            setActionsQueue(newActionsQueue);\n                        }\n                    }\n                    newTimer.timeRemaining--\n                }\n                return newTimer\n            })\n            setTimers(newTimers)\n        }\n    }\n\n    const registerTimer = (id, duration, action = null, timeRemaining = null, expired = false) => {\n        timeRemaining = timeRemaining ?? duration\n        const found = timers.find((timer) => timer.id === id)\n        if (found) {\n            setTimerError(`ERROR: timer: \"${id}\" already registered`)\n        } else {\n            const newTimers = timers.slice()\n            newTimers.push({ id, duration, action, timeRemaining, expired })\n            setTimers(newTimers)\n        }\n    }\n\n    const cancelTimer = (id) => {\n        const found = timers.find((timer) => timer.id === id);\n        if (found) {\n            let newTimers = timers.filter(timer => timer.id != id);  // Returns an array with everything except the removed timer\n            setTimers(newTimers);\n        } else {\n            setTimerError(`ERROR: timer: \"${id}\" not found`)\n        }\n    }\n\n    // Actions begin\n    const timeExpired = (payload) => {\n        // alert(payload);\n        console.log(payload)\n    }\n\n    const bar = () => {\n        alert(\"bar\");\n    }\n\n    const ACTIONS = {\n        \"timeExpired\": timeExpired,\n        \"bar\": bar\n    }\n    // Actions end\n\n\n    const setCollapsedValue = (id, boolVal) => {\n        setCollapsed(prevState => ({\n            ...prevState, [id]: boolVal\n        }))\n    }\n\n    const toggleCollapsed = (id) => {\n        setCollapsedValue(id, !getCollapsed(id));\n    }\n\n    const getCollapsed = (id) => {\n        return collapsed[id];\n    }\n\n    const isChecked = (id) => {\n        return !!checkListItems[id]\n    }\n\n    const setChecked = (id, boolVal) => {\n        const newValue = boolVal ? getTimestamp() : false\n        setCheckListItems(prevState => ({\n            ...prevState, [id]: newValue\n        }))\n    }\n\n    const toggleChecked = (id) => {\n        setChecked(id, !isChecked(id))\n    }\n\n    const someChecked = (ids) => {\n        const result = ids.some(id => isChecked(id))\n        console.log(`someChecked(${ids}): ${result}`)\n        return result\n    }\n\n    const allChecked = (ids) => {\n        const result = ids.every(id => isChecked(id))\n        console.log(`allChecked(${ids}): ${result}`)\n        return result\n    }\n\n    const isCurrentAssessmentFinding = (id) => {\n        return !!currentAssessmentFinding && currentAssessmentFinding === id\n    }\n\n    const toggleAssessmentFinding = (id) => {\n        const stepIsChecked = isChecked(id)\n        setCurrentAssessmentFinding(!stepIsChecked ? id : null)\n        toggleChecked(id)\n    }\n\n    const shouldDisplayInterventionForm = (id) => {\n        return Object.keys(showInterventionForm).includes(id) && showInterventionForm[id]\n    }\n\n    const setDisplayInterventionForm = (id, boolVal) => {\n        setShowInterventionForm(prevState => ({\n            ...prevState, [id]: boolVal\n        }))\n    }\n\n    const toggleDisplayInterventionForm = (id) => {\n        setDisplayInterventionForm(id, !showInterventionForm[id])\n    }\n\n    const setVital = (vital, value) => {\n        setCurrentVitals(prevState => ({\n            ...prevState, [vital]: value\n        }))\n    }\n\n    const saveScenarioToLog = (label = \"\") => {\n        const docRef = db.collection(\"logs\").doc()\n        let data = {\n            userName: currentUser.email,\n            scenario: scenario.id,\n            label: label,\n            timestamp: Date().toLocaleString()\n        }\n        let idsAndTimestamps = []\n        Object.keys(checkListItems).forEach(id => {\n            if (isChecked(id)) {\n                const ts = checkListItems[id]\n                idsAndTimestamps.push({id: id, timestamp: ts})\n            }\n        });\n        idsAndTimestamps.sort((recA, recB) => recA.timestamp - recB.timestamp)\n        data[\"events\"] = idsAndTimestamps\n        // console.log(JSON.stringify(data, null, 4))\n        docRef.set(data)\n    }\n\n    const buildDepListFromCheckListItemIDs = (ids) => ids.map(id => isChecked(id))\n\n    const setDerivedCheckListItemValue = (id, depChecker, deps) => {\n        const currVal = isChecked(id)\n        const newVal = (\"all\" === depChecker) ? allChecked(deps) : someChecked(deps)\n        // don't update checkListItems if we don't have an actual change\n        if (currVal != newVal) {\n            console.log(`setDerivedCheckListItemValue(${id}, \"${depChecker}\", [${deps}]): ${newVal}`)\n            setChecked(id, newVal)\n        }\n    }\n\n    const evalIDExpression = (exp) => {\n        exp = exp.replace(/AND/gi, ' && ')\n            .replace(/OR/gi, ' || ')\n            .replace(/NOT\\s*/gi, ' !');\n        const re = /[\\w][-\\w]*/gi;\n        const matches = exp.matchAll(re);\n        for (let match of matches) {\n            exp = isChecked(match)\n                ? exp.replace(match, 'true')\n                : exp.replace(match, 'false');\n        }\n        return eval(exp)\n    }\n\n    return (\n        <ScenarioContext.Provider\n            value={{\n                scenario,\n                checkListItems,\n                isChecked,\n                setChecked,\n                toggleChecked,\n                someChecked,\n                allChecked,\n                isCurrentAssessmentFinding,\n                toggleAssessmentFinding,\n                shouldDisplayInterventionForm,\n                setDisplayInterventionForm,\n                currentInterventionForm,\n                setCurrentInterventionForm,\n                toggleDisplayInterventionForm,\n                setCriticalCriteria,\n                currentVitals,\n                setVital,\n                vitalsRecomputed,\n                setVitalsRecomputed,\n                started,\n                setStarted,\n                paused,\n                setPaused,\n                getTimestamp,\n                timers,\n                timerError,\n                actionsQueue,\n                registerTimer,\n                cancelTimer,\n                clearTimerError,\n                setTimerError,\n                setCollapsedValue,\n                toggleCollapsed,\n                getCollapsed,\n                showScenarioComplete,\n                setShowScenarioComplete,\n                saveScenarioToLog,\n                buildDepListFromCheckListItemIDs,\n                setDerivedCheckListItemValue\n            }}\n        >\n            {children}\n        </ScenarioContext.Provider>\n    )\n}","import React from 'react'\nimport {\n    Container,\n    Row,\n    Col\n} from 'reactstrap'\n\nconst MDBContainer = ({lhs, rhs, lhsWidth=6, rhsWidth=6}) => {\n\n    return (\n        <Container fluid={true} className=\"main\">\n            <Row>\n                <Col md={lhsWidth} className=\"col\">\n                    {lhs}\n                </Col>\n                <Col md={rhsWidth} className=\"col right-col\">\n                    {rhs}\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default MDBContainer","import React from \"react\"\n\nconst CheckBoxIcon = ({checked = false}) => {\n\n    return (\n        <span\n            className=\"checkbox-icon material-icons-outlined\"\n        >\n            {checked ? \"check_box\" : \"check_box_outline_blank\"}\n        </span>\n    )\n}\n\nexport default CheckBoxIcon","import React, { useContext } from \"react\";\n\nimport classnames from \"classnames\"\n\nimport { ScenarioContext } from \"../contexts/ScenarioContext\"\n\nimport CheckBoxIcon from \"./icons/CheckBoxIcon\"\n\nconst CheckBox = (props) => {\n  // need props param to exist in order to access props.children\n\n  const { step, clickHandler, inlineChildren = [] } = props\n\n  const { isChecked } = useContext(ScenarioContext)\n\n  return (\n    <>\n      <label\n        className={classnames({\"text-danger\": step.type === 'critical-criteria'})}\n        onClick={() => clickHandler(step.id)}\n      >\n        <CheckBoxIcon checked={isChecked(step.id)} />\n        <b>{step.label}</b>\n        {inlineChildren}\n      </label>\n      { !!props.children &&\n        props.children\n      }\n    </>\n  )\n\n}\n\nexport default CheckBox;\n","import React, { useContext } from \"react\";\n\nimport classnames from \"classnames\";\n\nimport { ScenarioContext } from \"../contexts/ScenarioContext\"\n\n\nconst CallOutText = ({ step }) => {\n\n  const {scenario, isCurrentAssessmentFinding} = useContext(ScenarioContext)\n\n  return  (\n    <span className={classnames(\"callout\", {currentCallOut: isCurrentAssessmentFinding(step.id)})}>\n      {scenario.assessmentFindings[step.id]}\n    </span>\n  )\n\n}\n\nexport default CallOutText;","import React, { useContext } from \"react\";\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\"\n\nconst CallOutIcon = ({ step }) => {\n\n  const { isChecked } = useContext(ScenarioContext)\n\n  return (\n    isChecked(step.id)\n    ?\n      <span\n        className=\"callout-icon material-icons-outlined\"\n        style={{color:'grey'}}\n      >\n        message\n      </span>\n    :\n      <span\n        className=\"callout-icon material-icons-outlined\"\n      >\n        message\n      </span>\n  )\n}\nexport default CallOutIcon;\n","import React, { useContext } from \"react\"\n\nimport { ScenarioContext } from \"../contexts/ScenarioContext\"\n\nimport CheckBox from \"./CheckBox\"\nimport CallOutText from \"./CallOutText\"\nimport CallOutIcon from \"./icons/CallOutIcon\"\n\nconst CheckListItem = ({step}) => {\n    const {\n        isChecked,\n        toggleChecked,\n        toggleAssessmentFinding,\n    } = useContext(ScenarioContext)\n\n    switch (step.type) {\n        case 'assessment':\n            const inlines = (<CallOutIcon step={step} />)\n            return (\n                <CheckBox\n                    step={step}\n                    clickHandler={toggleAssessmentFinding}\n                    inlineChildren={inlines}\n                >\n                    <div>\n                        {isChecked(step.id) && <CallOutText step={step} /> }\n                    </div>\n                </CheckBox>\n            )\n        // case 'intervention-form':\n        //     return (\n        //         <CheckBox\n        //             step={step}\n        //             clickHandler={toggleDisplayInterventionForm}\n        //         >\n        //             {shouldDisplayInterventionForm(step.id) && (\n        //                 <InterventionForm form={step.id} />\n        //             )}\n        //         </CheckBox>\n        //     )\n        case \"prompt\":\n            return (<i>{step.label}</i>)\n        default:\n            // case 'required-action':\n            // case 'critical-criteria':\n            // case 'execution-error':\n            return (\n                <CheckBox\n                    step={step}\n                    clickHandler={toggleChecked}\n                />\n            )\n        }\n\n}\n\n\nexport default CheckListItem;","import React from \"react\"\n\nconst ChevronIcon = ({expand = false}) => {\n\n    return (\n        <span\n            className=\"chevron-icon material-icons-outlined\"\n        >\n            {expand ? \"arrow_drop_down  \" : \"arrow_right\"}\n        </span>\n\n    )\n}\n\nexport default ChevronIcon","import React, { useContext } from \"react\"\n\nimport { Collapse } from 'reactstrap'\n\nimport classnames from \"classnames\";\n\nimport { ScenarioContext } from \"../contexts/ScenarioContext\";\n\nimport CheckListItem from \"./CheckListItem\"\nimport ChevronIcon from \"./icons/ChevronIcon\"\n\nconst isHeading = (step) => step.type === \"heading\"\n\nexport default function CheckList({ steps, depth = 4, first = false}){\n  const { toggleCollapsed, getCollapsed } = useContext(ScenarioContext)\n\n  return (\n    <ul className={classnames({ first: first })}>\n      {steps.map((step) => (\n        <li key={`li-${step.id}`}>\n          {!isHeading(step)\n            ?\n            <CheckListItem step={step} />\n            :\n            <>\n              <p\n                style={{ cursor: \"pointer\" }}\n                className={`h${depth}`}\n                onClick={() => toggleCollapsed(step.id)}\n              >\n                {step.label}\n                <ChevronIcon expand={getCollapsed(step.id)} />\n              </p>\n\n              <Collapse isOpen={getCollapsed(step.id)}>\n                <CheckList\n                  steps={step.children}\n                  depth={depth + 1}\n                />\n              </Collapse>\n            </>\n          }\n        </li>\n      )\n      )}\n    </ul>\n  )\n\n}\n","import React, {useContext, useMemo, useState} from \"react\"\n\nimport { Table } from \"reactstrap\"\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\"\n\nimport CallOutText from \"../CallOutText\"\n\n\nconst AssessmentFindingsTabContent = () => {\n    const {\n        checkListItems,\n        isChecked,\n        scenario\n    } = useContext(ScenarioContext)\n\n    const checkedAssessmentSteps = useMemo(\n        () => {\n            return scenario.calloutLabels.filter(callout => isChecked(callout.id))\n        },\n        [checkListItems]\n    )\n\n    return (\n        <Table size=\"sm\" striped={true}>\n            <thead>\n                <tr>\n                    <th>Assessment</th>\n                    <th>Finding</th>\n                </tr>\n            </thead>\n            <tbody>\n                {checkedAssessmentSteps.map((step) => (\n                    <tr key={step.id}>\n                        <th>{step.label}</th>\n                        <td>\n                            <CallOutText\n                                step={step}\n                                displayAssessmentFindings={true}\n                            />\n                        </td>\n                    </tr>\n                )\n                )}\n            </tbody>\n        </Table>\n    )\n\n}\n\nexport default AssessmentFindingsTabContent","import React from \"react\"\n\nimport classnames from \"classnames\"\n\nconst CheckmarkIcon = ({checked}) => {\n\n    return (\n        <span className={classnames(\"material-icons-outlined\", { \"invisible\": !checked })}>\n            check\n        </span>\n    )\n}\n\nexport default CheckmarkIcon\n\n\n","import React from \"react\"\n\nimport classnames from \"classnames\"\n\nconst DoneIcon = ({ checked = false }) => {\n\n    return (\n        <span className={classnames(\"checkbox-icon\", \"material-icons-outlined\", { \"invisible\": !checked })}>\n            done_all\n        </span>\n    )\n}\n\nexport default DoneIcon","import React, {\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo\n} from \"react\"\n\nimport { Collapse } from 'reactstrap'\n\nimport {ScenarioContext} from \"../../contexts/ScenarioContext\"\n\nimport CheckBoxIcon from \"../icons/CheckBoxIcon\"\nimport CheckmarkIcon from \"../icons/CheckmarkIcon\"\nimport ChevronIcon from \"../icons/ChevronIcon\"\nimport DoneIcon from \"../icons/DoneIcon\"\n\n\nexport const NestedForm = ({id, label, checkedWhen = \"some\", children}) => {\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        isChecked,\n        setDerivedCheckListItemValue,\n        shouldDisplayInterventionForm,\n        toggleDisplayInterventionForm\n    } = useContext(ScenarioContext)\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    const depList = useCallback(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n\n    useEffect(\n        () => {setDerivedCheckListItemValue(id, checkedWhen, depIDs)},\n        [depList]\n    )\n\n    return (\n        <li>\n            <span onClick={() => toggleDisplayInterventionForm(id)}>\n                <CheckmarkIcon checked={isChecked(id)} />\n                {label}\n                <ChevronIcon expand={shouldDisplayInterventionForm(id)} />\n             </span>\n            <Collapse isOpen={shouldDisplayInterventionForm(id)} >\n                <ul>\n                {children.map(child =>\n                    <li key={child.id}><IntvFormItem item={child} /></li>\n                )}\n                </ul>\n            </Collapse>\n        </li>\n    )\n}\n\n\nexport const DerivedValue = ({id, checkedWhen, children}) => {\n\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        setDerivedCheckListItemValue\n    } = useContext(ScenarioContext)\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    const depList = useCallback(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n    // set the derived value on the initial render\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, checkedWhen, depIDs) },\n        []\n    )\n    // set the derived value when something changes\n    useEffect(\n        () => {setDerivedCheckListItemValue(id, checkedWhen, depIDs)},\n        [depList]\n    )\n\n    return (\n        <>\n            {children.map(child =>\n                <IntvFormItem item={child} />\n            )}\n        </>\n    )\n}\n\n\nexport const FormCheckBox = ({ id, label, clickHandler }) => {\n    const { isChecked } = useContext(ScenarioContext)\n\n    return (\n        <span onClick={() => clickHandler(id)}>\n            <CheckBoxIcon checked={isChecked(id)} />\n            <span>\n                {label}\n            </span>\n        </span>\n    )\n}\n\nexport const SelectOne = ({ id, label, children }) => {\n\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        isChecked,\n        setChecked,\n        setDerivedCheckListItemValue\n    } = useContext(ScenarioContext)\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    const depList = useCallback(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n    // set the derived value on initial render\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, \"some\", depIDs) },\n        []\n    )\n    // set the derived value when something changes\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, \"some\", depIDs) },\n        [depList]\n    )\n\n    const changeHandler = (event) => {\n        const selected = event.target.value\n        const notSelected = depIDs.filter(dep => dep !== selected)\n        notSelected.forEach(id => setChecked(id, false))\n        if (\"\" !== selected) {\n            setChecked(selected, true)\n        }\n    }\n\n    return (\n        <li>\n            <CheckmarkIcon checked={isChecked(id)} />\n            <i>{label}</i>\n            <ul>\n                <li>\n                    <select\n                        id={id}\n                        onChange={changeHandler}\n                        className=\"form-control\"\n                    >\n                        <option value=\"\">----</option>\n                        {children.map(child => (\n                            <option key={child.id} value={child.id} selected={isChecked(id)}>{child.label}</option>\n                        ))}\n                    </select>\n                </li>\n            </ul>\n        </li>\n    )\n}\n\nexport const SelectOneOrMore = ({id, label, checkedWhen, children}) => {\n\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        isChecked,\n        setDerivedCheckListItemValue\n    } = useContext(ScenarioContext)\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    const depList = useMemo(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n    // set the derived value on initial render\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, checkedWhen, depIDs) },\n        []\n    )\n    // set the derived value when something changes\n    useEffect(\n        () => {setDerivedCheckListItemValue(id, checkedWhen, depIDs)},\n        [...depList]\n    )\n\n    return (\n        <li>\n            <CheckmarkIcon checked={isChecked(id)} />\n            <i>{label}</i>\n            <ul>\n                {children.map((child) =>\n                    <li key={child.id}><IntvFormItem item={child} /></li>\n                )}\n            </ul>\n        </li>\n    )\n}\n\n\nexport const IntvFormItem = ({ item }) => {\n    const { toggleChecked, someChecked } = useContext(ScenarioContext)\n\n    switch (item.type) {\n        case \"select-one\":\n            return (\n                <SelectOne\n                    id={item.id}\n                    label={item.prompt}\n                    children={item.children}\n                />\n            )\n        case \"select-one-or-more\":\n            return (\n                <SelectOneOrMore\n                    id={item.id}\n                    label={item.prompt}\n                    checkedWhen={item.checkedWhen}\n                    children={item.children}\n                />\n            )\n        case \"derived-value\":\n            return (\n                <DerivedValue\n                    id={item.id}\n                    checkedWhen={item.checkedWhen}\n                    children={item.children}\n                />\n            )\n        case \"checkbox\":\n            return (\n                <FormCheckBox\n                    id={item.id}\n                    label={item.label}\n                    clickHandler={toggleChecked}\n                />\n            )\n        case \"nested-form\":\n            return (\n                <li>\n                    <NestedForm\n                        id={item.id}\n                        label={item.label}\n                        checkedWhen={item.checkedWhen || \"some\"}\n                        children={item.children}\n                    />\n                </li>\n            )\n        case \"prompt\":\n            return (<li><i>{item.label}</i></li>)\n        default:\n            return (<p>placeholder for unhandled item type</p>)\n    }\n}\n\nexport const IntvForm = ({ data }) => {\n    const {id, label, checkedWhen, children} = data\n    const {\n        buildDepListFromCheckListItemIDs,\n        checkListItems,\n        isChecked,\n        setDerivedCheckListItemValue\n    } = useContext(ScenarioContext)\n\n    const depIDs = useMemo(() => children.map(child => child.id), [...children])\n    const depList = useMemo(() => buildDepListFromCheckListItemIDs(depIDs), [checkListItems])\n    // set derived value on initial render\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, checkedWhen, depIDs)},\n        []\n    )\n    // set derived value whenever something changes\n    useEffect(\n        () => { setDerivedCheckListItemValue(id, checkedWhen, depIDs) },\n        [depList]\n    )\n\n    return (\n        <div>\n            <span className=\"h5\">\n                <DoneIcon checked={isChecked(id)} />\n                {label}\n            </span>\n            <hr className=\"minimal\"/>\n            <ul>\n                {children.map((rec) =>\n                    <IntvFormItem key={rec.id} item={rec} />\n                )}\n            </ul>\n        </div>\n    )\n}\n","import React, { useContext } from \"react\"\n\nimport {ScenarioContext} from \"../contexts/ScenarioContext\"\n\n// Airway\n//  BLS\n// import BLSAirwayManagement from \"./forms/BLSAirwayManagement\"\n// import RemoveAirwayObstructions from \"./forms/RemoveAirwayObstructions\"\n// import Suction from \"./forms/Suction\"\n// import Crico from \"./forms/Crico\"\n// ALS\n// import ALSAirwayManagement from \"./forms/ALSAirwayManagement\"\n// BREATHING\n// import AssuresAdequateVentilation from \"./forms/AssuresAdequateVentilation\"\n// import OxygenTherapy from \"./forms/OxygenTherapy\"\n//    MANAGE BREATING-COMPROMISING INJURIES\n// import OcclusiveDressing from \"./forms/OcclusiveDressing\"\n// import PleuralDecompression from \"./forms/PleuralDecompression\"\n// CIRCULATION\n// import ControlBleeding from \"./forms/ControlBleeding\"\n// import ControlShock from \"./forms/ControlShock\"\n// OTHER MANAGEMENT ACTIONS\n// import ManageSecondaryInjuries from \"./forms/ManageSecondaryInjuries\"\n// import RestrictSpinalMotion from \"./forms/RestrictSpinalMotion\"\n// import Transport from \"./forms/Transport\"\n// ONGOING MANAGEMENT PLAN\n// import TransfersPatient from \"./forms/TransfersPatient\"\n// import ReassessModifyInterventions from \"./forms/ReassessModifyInterventions\"\n// import AdministerAdditionalInterventions from \"./forms/AdministerAdditionalInterventions\"\n// import ReassessVitalSigns from \"./forms/ReassessVitalSigns\"\nimport { IntvForm } from \"./forms/FormUtils\"\n\n// import { FormGroup } from \"reactstrap\"\n\n\nconst InterventionForm = () => {\n\n    const {scenario, currentInterventionForm} = useContext(ScenarioContext)\n\n    switch(currentInterventionForm) {\n        case \"intv-form-bls-airway-management\":\n        case \"intv-form-remove-foreign-objects\":\n        case \"intv-form-suction\":\n        case \"intv-form-crico\":\n        case \"intv-form-als-airway-management\":\n        case \"intv-form-ventilation\":\n        case \"intv-form-supplemental-oxygen\":\n        case \"intv-form-occlusive-dressing\":\n        case \"intv-form-pleural-decompression\":\n        case \"intv-form-severe-bleeding\":\n        case \"intv-form-shock\":\n        case \"intv-form-manage-secondary-injuries\":\n        case \"intv-form-spinal-motion-restriction\":\n        case \"intv-form-transport-decisions\":\n        case \"intv-form-transfers-patient\":\n        case \"intv-form-reassess-vital-signs\":\n        case \"intv-form-reassess-modify-interventions\":\n        case \"intv-form-administer-additional-interventions\":\n            // return (<BLSAirwayManagement />)\n            // return (<RemoveAirwayObstructions />)\n            // return (<Suction />)\n            // return (<Crico />)\n            // return (<ALSAirwayManagement />)\n            // return (<AssuresAdequateVentilation />)\n            // return (<OxygenTherapy />)\n            // return (<OcclusiveDressing />)\n            // return (<PleuralDecompression />)\n            // return (<ControlBleeding />)\n            // return (<ControlShock />)\n            // return (<ManageSecondaryInjuries />)\n            // return (<RestrictSpinalMotion />)\n            // return (<Transport />)\n            // return (<TransfersPatient />)\n            // return (<ReassessVitalSigns />)\n            // return (<ReassessModifyInterventions />)\n            // return (<AdministerAdditionalInterventions />)\n            return (<IntvForm data={scenario.interventionForms[currentInterventionForm]} />)\n        default:\n            return (<div>unimplemented form</div>)\n    }\n}\n\n\n// const InterventionForm = ({step}) => {\n\n//     const { scenario, shouldDisplayInterventionForm, toggleChecked } = useContext(ScenarioContext)\n\n//     const getInterventionsList = () => {\n//         return (\n//             scenario.interventionForms[step.id].interventions.map((intv) => (\n//                 <div key={intv.id}>\n//                     <label>\n//                         <input type=\"checkbox\" />\n//                         &nbsp; {intv.label}\n//                     </label>\n//                 </div>\n//             ))\n//         )\n//     }\n\n//     const renderFormItem = (formItem) => {\n//         switch (formItem.type) {\n//             case \"prompt\":\n//                 return (<i>{formItem.label}</i>)\n//             case \"intervention\":\n//                 return (\n//                     <label>\n//                         <input type=\"checkbox\" id={formItem.id} />\n//                         {formItem.label}\n//                     </label>\n//                 )\n//             case \"intervention-form\":\n//                 return (\n//                     <InterventionForm step={formItem} />\n//                 )\n//             case \"heading\":\n//                 return (\n//                     <>\n//                     <p><b>{formItem.label}</b></p>\n//                     <ul>\n//                         {formItem.children.map((fi) => (\n//                             <li key={`fi-${fi.id}`}>\n//                                 {renderFormItem(fi)}\n//                             </li>\n//                         ))}\n//                     </ul>\n//                     </>\n//                 )\n//         }\n//     }\n//     if (!shouldDisplayInterventionForm(step.id)) {\n//         return (<div></div>)\n//     } else {\n//         const formItems = scenario.interventionForms[step.id]\n//         // return (\n//         //     <div className=\"intervention-form\">\n\n//         //     </div>\n//         // )\n//         if (!formItems) {\n//             return (\n//                 <div className=\"intervention-form\">\n//                     <label>\n//                         <input type=\"checkbox\" />Placeholder\n//                     </label>\n//                 </div>\n//             )\n//         }\n\n//         return (\n//             <div className=\"intervention-form\">\n//                 <ul>\n//                     {formItems.map((item) => (\n//                         <li key={`fi-${item.id}`}>\n//                             {renderFormItem(item)}\n//                         </li>\n//                     ))}\n//                 </ul>\n\n\n//                 {/* <form> */}\n//                     {/* { getInterventionsList()\n//                     {/* <button\n//                         type=\"button\"\n//                         className=\"btn btn-primary btn-small\"\n//                         onClick={() => toggleChecked(step.id)}\n//                     >\n//                         Submit\n//                     </button> */}\n//                 {/* </form> */}\n//             </div>\n//         )\n//     }\n// }\n\nexport default InterventionForm","import React, {useState, useContext, useEffect, useMemo} from \"react\"\n\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n} from \"reactstrap\"\n\nimport classnames from \"classnames\"\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\"\nimport InterventionForm from \"../InterventionForm\"\n\n\nconst InterventionsTabContent = () => {\n\n    const {\n        checkListItems,\n        currentInterventionForm,\n        isChecked,\n        setCurrentInterventionForm,\n        scenario\n    } = useContext(ScenarioContext)\n\n    const options = useMemo(() => scenario.interventionFormsMenu, [scenario.interventionFormsMenu])\n    const [dropdownOpen, setDropdownOpen] = useState(false)\n    const toggleDropDown = () => setDropdownOpen(prevState => !prevState)\n\n    const handleInterventionFormSelection = (event) => setCurrentInterventionForm(event.target.id)\n\n    return (\n        <>\n            <Dropdown isOpen={dropdownOpen} toggle={toggleDropDown}>\n                <DropdownToggle caret>\n                    Select an Intervention\n                </DropdownToggle>\n                <DropdownMenu>\n                    {options.map((opt) =>\n                        <DropdownItem\n                            key={opt.id}\n                            id={opt.id}\n                            className={\n                                classnames({\n                                        \"dropdown-header\": \"heading\" === opt.type,\n                                        \"dropdown-form\": \"heading\" !== opt.type\n                                    },\n                                    `dropdown-depth-${opt.depth}`\n                            )}\n                            header={opt.type === \"heading\"}\n                            onClick={handleInterventionFormSelection}\n                        > {opt.label}\n                        </DropdownItem>\n                    )}\n                </DropdownMenu>\n            </Dropdown>\n\n            {!!currentInterventionForm && <InterventionForm /> }\n        </>\n    )\n}\n\nexport default InterventionsTabContent","import React, { useState } from \"react\"\n\nimport classnames from \"classnames\"\n\n\nexport default function RevealTableRow({label, values}) {\n    const [show, setShow] = useState(false)\n    const toggle = () => setShow(!show)\n\n    return (\n        <tr>\n            <th onClick={() => toggle()}>{label} </th>\n            {\n                values.map((value, index) => (\n                    <td key={ index }>\n                        <span className={classnames({ invisible: !show })}>\n                            {value}\n                        </span>\n                    </td>\n                ))\n            }\n        </tr>\n    )\n\n}","import React from \"react\"\n\nimport { Table } from \"reactstrap\"\n\nimport RevealTableRow from \"./RevealTableRow\"\n\nexport default function RevealTable({title, headings=[], rows=[]}) {\n\n    return (\n        <Table striped={true} size=\"sm\">\n            <thead>\n                <tr>\n                    {\n                        headings.map((heading, index) => (\n                            <th key={index}>{heading}</th>\n                        ))\n                    }\n                </tr>\n            </thead>\n            <tbody>\n                {rows.map((row, index) =>\n                    <RevealTableRow\n                        key={index}\n                        label={row.label}\n                        values={row.value}\n                    />\n                )}\n            </tbody>\n        </Table>\n    )\n}","import React, { useContext } from \"react\"\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\"\n\nimport RevealTable from \"../RevealTable\"\n\nconst SampleTabContent = () => {\n    const {scenario} = useContext(ScenarioContext)\n\n    const sample = Object.entries(scenario.SAMPLE).map(rec => {\n        return { label: rec[0], value: [rec[1]] }\n    })\n    return (\n        <RevealTable\n            title=\"SAMPLE\"\n            headings={[\"Type\", \"Value\"]}\n            rows={sample}\n        />\n    )\n}\n\nexport default SampleTabContent","import React, {useContext } from \"react\"\n\nimport {ScenarioContext} from \"../../contexts/ScenarioContext\"\n\nimport RevealTable from \"../RevealTable\"\n\nconst VitalsTabContent = () => {\n    const {\n        scenario,\n        currentVitals,\n        vitalsRecomputed\n    } = useContext(ScenarioContext)\n    // vitals tab will display either 2 or 3 columns, depending on\n    // whether vitals have been recomputed, and thus we need to display\n    // both the initial and current value\n    const vitalsHeaders =\n        vitalsRecomputed\n            ? [\"Vital Sign\", \"Initial Value\", \"Current Value\"]\n            : [\"Vital Sign\", \"Current Value\"]\n\n    const vitals = Object.entries(scenario.vitalSigns).map(iv => {\n        const value =\n            vitalsRecomputed\n                ? [iv[1].initial, currentVitals[iv[0]]]\n                : [iv[1].initial]\n\n        return {\n            label: iv[0],\n            value: value\n        }\n    })\n\n    return (\n            <RevealTable\n                title=\"Vitals\"\n                headings={vitalsHeaders}\n                rows={vitals}\n            />\n    )\n}\n\nexport default VitalsTabContent","import React, { useState } from \"react\"\n\nimport {\n    Nav,\n    NavItem,\n    NavLink,\n    TabContent,\n    TabPane,\n} from \"reactstrap\"\n\nimport classnames from \"classnames\"\n\nimport AssessmentFindingsTabContent from \"./tabs/AssessmentFindings\"\nimport InterventionsTabContent      from \"./tabs/InterventionsTab\"\nimport SampleTabContent             from \"./tabs/SampleTab\"\nimport VitalsTabContent             from \"./tabs/VitalsTab\"\n\nexport default function RaterInfo({defaultTab = \"interventions\"}) {\n    const [activeTab, setActiveTab] = useState(defaultTab)\n\n    const activateTab = (tab) => {\n        if (activeTab !== tab) setActiveTab(tab)\n    }\n    const isActiveTab = (tab) => tab === activeTab\n\n    return (\n        <>\n            <Nav tabs>\n                <NavItem>\n                    <NavLink\n                        className={classnames({ active: isActiveTab('interventions')})}\n                        onClick={() => activateTab(\"interventions\")}\n                    >\n                        Interventions\n                    </NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink\n                        className={classnames({ active: isActiveTab('vitals') })}\n                        onClick={() => activateTab('vitals')}\n                    >\n                        Vitals\n                    </NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink\n                        className={classnames({ active: isActiveTab('sample') })}\n                        onClick={() => activateTab('sample')}\n                    >\n                        SAMPLE\n                    </NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink\n                        className={classnames({ active: isActiveTab('callouts') })}\n                        onClick={() => activateTab('callouts')}\n                    >\n                        Assessment Findings\n                    </NavLink>\n                </NavItem>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n                <TabPane tabId=\"interventions\">\n                    <InterventionsTabContent />\n                </TabPane>\n                <TabPane tabId=\"vitals\" >\n                    <VitalsTabContent />\n                </TabPane>\n                <TabPane tabId=\"sample\" >\n                    <SampleTabContent />\n                </TabPane >\n                <TabPane tabId=\"callouts\" >\n                    <AssessmentFindingsTabContent />\n                </TabPane>\n            </TabContent>\n        </>\n    );\n}","import React, { useContext } from \"react\"\n\nimport { ScenarioContext } from \"../contexts/ScenarioContext\"\n\nimport MDBContainer from \"./MDBContainer\"\nimport CheckList from \"./CheckList\"\nimport RaterInfo from \"./RaterInfo\"\n\nconst CheckListRaterInfoLayout = () => {\n    const { scenario } = useContext(ScenarioContext)\n\n    const lhs = (\n        <CheckList\n            heading=\"Checklist\"\n            steps={scenario.steps}\n            first={true}\n            displayAssessmentFindings={true}\n        />\n    )\n\n    return (\n        <MDBContainer\n            lhs={lhs}\n            rhs={<RaterInfo />}\n            lhsWidth={6}\n            rhsWidth={6}\n        />\n    )\n}\n\nexport default CheckListRaterInfoLayout","import React from \"react\"\n\nconst UserIcon = () => {\n\n    return (\n        <i className=\"bi-person-circle\" style={{ fontSize: \"1.5rem\", color: \"white\" }}></i>\n    )\n}\n\nexport default UserIcon","import React, { useContext, useState } from \"react\"\n\nimport {\n    Dropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n} from \"reactstrap\"\n\nimport { AuthContext } from \"@meddbriefer/mdb-auth\"\n\nimport UserIcon from \"../icons/UserIcon\"\n\nconst UserDropDown = ({show}) => {\n    const { userName, signOutUser } = useContext(AuthContext)\n    const [showUserMenu, setShowUserMenu] = useState(false)\n    const toggleUserMenu = () => setShowUserMenu(!showUserMenu)\n\n    if (!show) {\n        return (<span></span>)\n    }\n\n    return (\n        <Dropdown nav inNavbar isOpen={showUserMenu} direction=\"down\" toggle={toggleUserMenu}>\n            <DropdownToggle nav caret >\n                <UserIcon />\n            </DropdownToggle>\n            <DropdownMenu>\n                <DropdownItem disabled>{userName}</DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem onClick={signOutUser}>Sign Out</DropdownItem>\n            </DropdownMenu>\n        </Dropdown>\n    )\n}\n\nexport default UserDropDown","import React, { useContext, useState } from 'react';\n\nimport {\n    // Button,\n    Nav,\n    Navbar,\n    NavbarBrand,\n    NavbarText,\n} from \"reactstrap\";\n\nimport { AuthContext } from \"@meddbriefer/mdb-auth\"\n\nimport UserDropDown from \"./UserDropDown\"\n\n\nconst MDBNavBar = ({title, leftNav = null, rightNav = null }) => {\n\n    const { isAuthenticated } = useContext(AuthContext)\n\n    return (\n        <Navbar color=\"dark\" dark>\n\n            <NavbarBrand href=\"#\">\n                MedDBriefer\n            </NavbarBrand>\n\n\n                {!!leftNav &&\n                    <Nav>\n                    {leftNav}\n                    </Nav>\n                }\n\n                {!!title &&\n                    // <Nav>\n                        <NavbarText tag=\"h5\">{title}</NavbarText>\n                    // </Nav>\n                }\n\n                <Nav>\n                    {!!rightNav && rightNav}\n                    {/* <>\n                        <NavbarText>\n                            Welcome, {userName} &nbsp;\n                        </NavbarText>\n                        <Button\n                            color=\"danger\"\n                            onClick={signOutUser}\n                        >\n                            Sign Out\n                        </Button>\n                    </> */}\n                </Nav>\n                <Nav>\n                    <UserDropDown show={isAuthenticated} />\n                </Nav>\n\n        </Navbar>\n    )\n}\n\nexport default MDBNavBar;\n","import React, { useContext } from \"react\"\n\nimport { Button } from \"reactstrap\"\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\"\n\nconst SaveScenarioButton = () => {\n    const { setShowScenarioComplete } = useContext(ScenarioContext)\n\n    return (\n        <Button\n            outline\n            size=\"sm\"\n            color=\"danger\"\n            onClick={() => setShowScenarioComplete(true)}\n        >\n            Save Scenario\n        </Button>\n    )\n}\n\nexport default SaveScenarioButton\n","import React, { useContext } from \"react\"\n\nimport { Button } from \"reactstrap\"\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\"\n\nconst ScenarioInfoButton = () => {\n    const { setPaused } = useContext(ScenarioContext)\n\n    return (\n        <Button\n            outline\n            size=\"sm\"\n            color=\"primary\"\n            onClick={() => setPaused(true)}\n        >\n            Scenario Info\n        </Button>\n    )\n}\n\nexport default ScenarioInfoButton\n","import React from \"react\"\n\nconst TimerIcon = ({running}) => {\n    return (\n        <span className=\"material-icons-outlined\">{running ? \"timer\" : \"timer_off\"}</span>\n    )\n}\n\nexport default TimerIcon","export const formatAsMinSecs = (seconds) => {\n    return new Date(seconds * 1000).toISOString().substr(14, 5)\n}","import React, { useContext } from 'react';\n\nimport { NavbarText } from \"reactstrap\";\n\nimport cn from \"classnames\"\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\";\n\nimport TimerIcon from \"../icons/TimerIcon\"\n\nimport { formatAsMinSecs } from \"../../utils\"\n\nconst Timer = () => {\n\tconst { started, paused, timers } = useContext(ScenarioContext)\n\n\tconst scenTimer = timers.find(timer => timer.id === \"scenario\")\n\n\treturn (\n\t\t<>\n\t\t\t{/* <NavbarText className=\"material-icons-outlined\">\n\t\t\t\t{(paused || !started) ? \"timer_off\" : \"timer\"}\n\t\t\t</NavbarText> */}\n\t\t\t<TimerIcon running={paused || !started} />\n\t\t\t<NavbarText className={cn({\"text-danger\": scenTimer.expired})}>{formatAsMinSecs(scenTimer.timeRemaining)}</NavbarText>\n\t\t</>\n\t)\n}\n\nexport default Timer;","import React from 'react'\n\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\n\n\nconst MDBModal = (props) => {\n    const {title, show, dismiss, children} = props;\n    return (\n        <Modal isOpen={show} toggle={dismiss} size=\"xl\" backdrop=\"static\">\n            <ModalHeader toggle={dismiss}>\n                <span className=\"h2\">{title}</span>\n            </ModalHeader>\n            <ModalBody>\n                {children}\n            </ModalBody>\n        </Modal>\n    );\n}\n\nexport default MDBModal;","import React, { useContext, useState } from \"react\"\n\nimport { Redirect} from \"react-router-dom\"\nimport { Button } from \"reactstrap\"\n\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\"\n\nimport MDBModal from \"./MDBModal\"\n\n// import { formatAsMinSecs } from \"../utils\"\n\nconst ScenarioCompleteModal = () => {\n    const [doRedirect, setDoRedirect] = useState(false)\n\n    const {showScenarioComplete, setShowScenarioComplete, saveScenarioToLog} = useContext(ScenarioContext)\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const {label} = event.target.elements\n        saveScenarioToLog(label.value)\n        setShowScenarioComplete(false)\n        setDoRedirect(true)\n    }\n\n    const handleCancel = () => setShowScenarioComplete(false)\n\n    if (doRedirect) {\n        return (\n            <Redirect to=\"/\" />\n        )\n    }\n    return (\n\n        <MDBModal\n            title=\"Scenario Complete\"\n            show={showScenarioComplete}\n        >\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p className=\"text-danger\">\n                            WARNING: Submitting the scenario won't allow you to\n                            work on it any more.\n                        </p>\n                        <p>\n                            Click 'cancel' if you wish to working\n                            on this scenario.\n                        </p>\n                    </div>\n                </div>\n                <form onSubmit={handleSubmit} >\n\n                    <div className=\"row\">\n                        <label\n                            htmlFor=\"label\"\n                            className=\"col-sm-2 col-form-label\"\n                        >\n                            Label\n                        </label>\n                        <input\n                            className=\"col-sm-10 form-control\"\n                            type=\"text\"\n                            id=\"label\"\n                            defaultValue=\"\"\n                            placeholder=\"enter video name (if applicable)\"\n                        />\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <Button type=\"submit\" color=\"danger\" size=\"lg\"> Submit Scenario Data</Button>\n                            <Button color=\"success\" size=\"lg\" onClick={handleCancel}> Cancel </Button>\n                        </div>\n\n                    </div>\n\n                </form>\n            </div>\n        </MDBModal>\n    )\n}\n\nexport default ScenarioCompleteModal\n","import React, { useContext, useEffect, useState } from \"react\"\n\nimport { Button, Table } from \"reactstrap\"\n\nimport { ScenarioContext } from \"../../contexts/ScenarioContext\"\n\nimport MDBModal from \"./MDBModal\"\n\nimport { formatAsMinSecs } from \"../../utils\"\n\nconst ScenarioInfo = () => {\n\n    const { scenario, timers, started, paused, setStarted, setPaused } = useContext(ScenarioContext)\n\n    const [showModal, setShowModal] = useState(!started || paused)\n    const startScenario = () => setStarted(true)\n    const resumeScenario = () => setPaused(false)\n\n    // Modal's isOpen needs to be a simple bool prop, not a method\n    // so we need a a simple bool which is a result of an expression\n    // whenever either of these change\n    useEffect(() => {\n        setShowModal(!started || paused)\n    }, [started, paused])\n\n    return (\n        <MDBModal\n            name=\"Scenario Info\"\n            show={showModal}\n        >\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <h3>Instructor Information</h3>\n                        <p>{scenario.info.instructorInformation}</p>\n                    </div>\n                    <div className=\"col-6\">\n                        <h3>Patient Information</h3>\n                        <ul>\n                            <li><b>Moulage:</b> {scenario.info.patientInformation.moulage}</li>\n                            <li><b>Position:</b> {scenario.info.patientInformation.position}</li>\n                            <li><b>Actions:</b> {scenario.info.patientInformation.actions}</li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <h3>Dispatch Information</h3>\n                        <p>{scenario.info.dispatchInfo}</p>\n                    </div>\n                    <div className=\"col-6\">\n                        <h3>Scene Assessment</h3>\n                        <p>{scenario.info.sceneAssessment}</p>\n                    </div>\n                </div>\n                <div className=\"row justify-content-md-center\">\n                    <Table size=\"sm\" striped={true}>\n                        <thead>\n                            <tr>\n                                <th>Timer</th>\n                                <th>Duration</th>\n                                <th>Time Remaining</th>\n                                <th>Expired</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {timers.map((timer) => (\n                                <tr\n                                    key={timer.id}\n                                    className=\"h4\"\n                                >\n                                    <td>{timer.id}</td>\n                                    <td>{formatAsMinSecs(timer.duration)}</td>\n                                    <td>{formatAsMinSecs(timer.timeRemaining)}</td>\n                                    <td>{`${timer.expired}`}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </div>\n                <div className=\"row justify-content-md-center\">\n                    {!started\n                        ? <Button color=\"primary\" size=\"lg\" onClick={startScenario}> Start Scenario</Button>\n                        : <Button color=\"primary\" size=\"lg\" onClick={resumeScenario}> Resume Scenario </Button>\n                    }\n                </div>\n            </div>\n        </MDBModal>\n    )\n}\n\nexport default ScenarioInfo","import React, { useState, useEffect } from \"react\"\n\nimport { ScenarioProvider } from \"../contexts/ScenarioContext\"\n\nimport CheckListRaterInfoLayout from \"../components/CheckListRaterInfoLayout\"\n\nimport MDBNavBar          from \"../components/navbar/MDBNavBar\"\nimport SaveScenarioButton from \"../components/navbar/SaveScenarioButton\"\nimport ScenarioInfoButton from \"../components/navbar/ScenarioInfoButton\"\nimport Timer              from \"../components/navbar/Timer\"\n\nimport ScenarioCompleteModal from \"../components/modals/ScenarioCompleteModal\"\nimport ScenarioInfo          from \"../components/modals/ScenarioInfo\"\n\n// import scenarioData from \"../data/strawMan.json\"\nimport scenarioData from \"@meddbriefer/scenario-data/strawManV2_orig.json\"\n\n// function mapKeysToFalse(dict) {\n//     const newDict = Object.keys(dict).reduce((obj, key) => {\n//         obj[key] = false;\n//         return obj;\n//     }, {})\n//     return newDict;\n// }\n\n// function mapArrayOfObjKeysToFalse(array) {\n//     const dict = {}\n//     array.forEach((obj) => {dict[obj.id] = false})\n//     return dict\n// }\n\n// function mapChildObjKeysToFalse(parent) {\n//     const dict = {}\n//     Object.keys(parent).forEach((key) => {\n//         parent[key].forEach(child => {\n//             dict[child.id] = false\n//         })\n//     })\n//     return dict\n// }\n\nconst getDefaultValues = (scen) => {\n    return {\n        vitals: scen.initialVitalSigns,\n        vitalsRecomputed: false,\n        // currentNode: null,\n        checkListItems: {}, //mapChildObjKeysToFalse(scen.items),\n        criticalCriteria: {}, //mapArrayOfObjKeysToFalse(scen.criticalCriteria),\n        showForm: {}, //mapKeysToFalse(scen.interventionForms)\n    }\n}\n\n\nconst Scenario = ({scenarioId}) => {\n    const [scenario, setScenario] = useState(null)\n    window.scenario = scenario\n    const [initValues, setInitValues] = useState(null)\n\n    useEffect(\n        () => {\n            const loadScen = () => {\n                //ignore scenarioId for now importing hardcoded scen file\n                // const scen = traumaScenarioIndexer(scenarioData)\n                setScenario(scenarioData)\n                const defaults = getDefaultValues(scenarioData)\n                setInitValues(defaults)\n            }\n            loadScen()\n        }, []\n    )\n\n    const rightNav = (\n        <>\n            <SaveScenarioButton />\n            <ScenarioInfoButton />\n            <Timer />\n        </>\n    )\n\n    return (\n        !scenario\n        ? <div>Loading scenario...</div>\n        :\n        <ScenarioProvider\n            scenario={scenario}\n            defaultValues={initValues}\n        >\n            <MDBNavBar\n                title={`Scenario: ${scenario.id}`}\n                rightNav={rightNav}\n            />\n\n            <CheckListRaterInfoLayout />\n            <ScenarioInfo />\n            <ScenarioCompleteModal />\n\n        </ScenarioProvider>\n    )\n}\n\nexport default Scenario","import React from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { Container, Row, Col } from \"reactstrap\"\n\nimport MDBNavBar from \"../components/navbar/MDBNavBar\"\n\nconst ScenarioList = (props) => {\n    const scenarios = [\n        {id: 1, name: \"PHTC M2CA\"},\n        {id: 2, name: \"Some Other Scenario\"}\n    ]\n\n    return (\n        <>\n            <MDBNavBar title=\"Scenario List\" />\n            <Container>\n                <Row>\n                    <Col sm=\"3\"></Col>\n                    <Col sm=\"6\">\n                        <h2>Your Assigned Scenarios:</h2>\n                        <ul>\n                            {scenarios.map((scen) => (\n                                <li key={scen.id}>\n                                    <Link className=\"h3\" to={`/scenario/${scen.id}`}> {scen.name}</Link>\n                                </li>\n                            ))}\n                        </ul>\n                    </Col>\n                    <Col sm=\"3\"></Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default ScenarioList","import React from \"react\"\n\nimport MDBNavBar from \"./navbar/MDBNavBar\"\n\nconst UnauthedLayout = (props) => {\n\n    return (\n        <>\n            <MDBNavBar\n                title=\"MedDBriefer Authentication\"\n            />\n            { props.children }\n        </>\n    )\n}\n\nexport default UnauthedLayout","import React from \"react\"\n\nimport {\n    HashRouter as Router,\n    Switch,\n} from \"react-router-dom\"\n\nimport { AuthProvider, PrivateRoute } from \"@meddbriefer/mdb-auth\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./styles.css\";\n\nimport Scenario     from \"./routes/Scenario\"\nimport ScenarioList from \"./routes/ScenarioList\"\n\nimport UnauthedLayout from \"./components/UnauthedLayout\"\n\nconst App = (props) => {\n    return (\n        <AuthProvider>\n            <Router>\n                <Switch>\n                    <PrivateRoute\n                        exact path=\"/scenario/:scenarioId\"\n                        authFlowLayout={UnauthedLayout}\n                        component={Scenario}\n                    />\n                    // default (catchall) route\n                    <PrivateRoute\n                        authFlowLayout={UnauthedLayout}\n                        component={ScenarioList}\n                    />\n                </Switch>\n            </Router>\n        </AuthProvider>\n    )\n}\n\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\"\n\n// reactstrap is using some deprecated stuff, which brings up warnings, making\n// the console difficult to read.\n//\n// for instance the following pair of warnings, rear their ugly head whenever\n// you display/hide a\n// Modal:\n//\n//   Warning: Legacy context API has been detected within a strict - mode tree.\n\n//       The old API will be supported in all 16.x releases, but applications\n//       using it should migrate to the new version.\n\n//       Please update the following components: Transition\n//\n//   Warning: findDOMNode is deprecated in StrictMode.\n//       findDOMNode was passed an instance of Transition which is inside StrictMode.\n//       Instead, add a ref directly to the element you want to reference.\n//       Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node\n//\n// this is simply the reactstrap project being slow to make use of a dep which\n// fixes the problem. Everything works for the timebeing, and the warning only\n// comes up in development builds (not production)\n//\n// if this is causing you difficulties, you can temporarily (IMPORTANT!\n// remember to re-enable this) not wrapping <App />  with <React.StrictMode>\n// again, I stress *temporarily* as StrictMode will help find other issues as\n// well, and they'll mostly be **our** issues, not 3rd party stuff\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import firebase from 'firebase/app'\nimport \"firebase/auth\";\nimport \"firebase/firestore\"\n\nexport const firebaseCfg = {\n    apiKey: \"AIzaSyBOgWAbXUGckpad2sk0IUo00hZsV4WxG0E\",\n    authDomain: \"meddbriefer-68cd4.firebaseapp.com\",\n    projectId: \"meddbriefer-68cd4\",\n    storageBucket: \"meddbriefer-68cd4.appspot.com\",\n    messagingSenderId: \"1087114796018\",\n    appId: \"1:1087114796018:web:679fbab38dbf78af0ce96b\",\n    measurementId: \"G-Q7QZKC9KHW\"\n}\n\n// don't reinitialize app if it already exists\nconst firebaseApp = !firebase.apps.length ? firebase.initializeApp(firebaseCfg) : firebase.app()\n\nexport const auth = firebaseApp.auth()\nexport const db = firebaseApp.firestore()\n"],"sourceRoot":""}